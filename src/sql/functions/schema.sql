create table public.award (
  "awardID" bigint generated by default as identity not null,
  "awardType" character varying not null,
  name character varying not null,
  price bigint not null,
  constraint award_pkey primary key ("awardID"),
  constraint award_awardID_key unique ("awardID")
) TABLESPACE pg_default;

create table public."awardGiven" (
  "awardID" bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  message text null,
  "postID" uuid null,
  "commentID" uuid null,
  "userID" bigint not null,
  constraint awardGiven_awardID_fkey foreign KEY ("awardID") references award ("awardID") on delete set null,
  constraint awardGiven_commentID_fkey foreign KEY ("commentID") references comment (id) on delete CASCADE,
  constraint awardGiven_postID_fkey foreign KEY ("postID") references posts (id) on delete CASCADE,
  constraint awardGiven_userID_fkey foreign KEY ("userID") references users ("userID") on delete CASCADE
) TABLESPACE pg_default;

create table public.comment (
  id uuid not null default gen_random_uuid (),
  "createdAt" timestamp with time zone not null default now(),
  content json not null,
  "userID" bigint not null,
  "postID" uuid null,
  constraint comment_id_key unique (id),
  constraint comment_postID_fkey foreign KEY ("postID") references posts (id) on delete CASCADE,
  constraint comment_userID_fkey foreign KEY ("userID") references users ("userID") on delete set null
) TABLESPACE pg_default;

create table public."directMessage" (
  "messageID" bigint generated by default as identity not null,
  content text not null,
  read boolean not null default false,
  "sentAt" timestamp without time zone not null,
  "senderID" bigint not null,
  "receiverID" bigint not null,
  constraint directMessage_pkey primary key ("messageID"),
  constraint directMessage_messageID_key unique ("messageID"),
  constraint directMessage_receiverID_fkey foreign KEY ("receiverID") references users ("userID") on delete set null,
  constraint directMessage_senderID_fkey foreign KEY ("senderID") references users ("userID") on delete set null
) TABLESPACE pg_default;

create table public.posts (
  id uuid not null default gen_random_uuid (),
  title text not null,
  content json null,
  "createdAt" timestamp without time zone null default now(),
  "userID" bigint null,
  "subredditID" bigint null,
  constraint posts_id_key unique (id),
  constraint posts_subredditID_fkey foreign KEY ("subredditID") references subreddit ("subredditID") on delete CASCADE,
  constraint posts_userID_fkey foreign KEY ("userID") references users ("userID") on delete set null
) TABLESPACE pg_default;

create table public.replies (
  id uuid not null default gen_random_uuid (),
  replies_id uuid not null default gen_random_uuid (),
  constraint replies_id_fkey foreign KEY (id) references comment (id),
  constraint replies_replies_id_fkey foreign KEY (replies_id) references comment (id)
) TABLESPACE pg_default;

create table public.subreddit (
  "subredditID" bigint generated by default as identity not null,
  "subredditName" character varying not null,
  "isPrivate" boolean not null default false,
  description text null,
  "createdAt" date not null,
  "subredditImage" text not null,
  constraint subreddit_pkey primary key ("subredditID", "subredditName"),
  constraint subreddit_subredditID_key unique ("subredditID"),
  constraint subreddit_subredditName_key unique ("subredditName")
) TABLESPACE pg_default;

create table public.subscription (
  "createdAt" timestamp with time zone not null default now(),
  "subredditID" bigint not null,
  "userID" bigint not null,
  constraint subscription_subredditID_fkey foreign KEY ("subredditID") references subreddit ("subredditID") on delete CASCADE,
  constraint subscription_userID_fkey foreign KEY ("userID") references users ("userID") on delete CASCADE
) TABLESPACE pg_default;

create table public.users (
  "userName" character varying not null,
  "userID" bigint generated by default as identity not null,
  password character varying not null,
  email character varying not null,
  "createdAt" date not null,
  karma bigint not null,
  avatar text not null,
  constraint users_pkey primary key ("userName", "userID"),
  constraint users_email_key unique (email),
  constraint users_userID_key unique ("userID")
) TABLESPACE pg_default;

create table public.vote (
  "userID" bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  "isUpvote" boolean not null,
  "commentID" uuid null,
  "postID" uuid null,
  constraint vote_commentID_fkey foreign KEY ("commentID") references comment (id) on delete CASCADE,
  constraint vote_postID_fkey foreign KEY ("postID") references posts (id) on delete CASCADE,
  constraint vote_userID_fkey foreign KEY ("userID") references users ("userID") on delete CASCADE
) TABLESPACE pg_default;

